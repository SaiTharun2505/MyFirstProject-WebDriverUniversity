DataBase Testing :

DataBase : DataBase is a storage area, where data can be stored

DataBase testing is classified into two parts
	1. White Box Testing (Structural)
	2. Black Box Testing (Architectural)

1. White Box Testing : Schema testing is white box testing, in which we can test 
	1.Table 
	2. Table Columns
	3. Views
	4. Stored Procedures
	5. Functions
	6. Triggers

2. Black Box Testing : Funtion and non functionality testing comes under black box testing, in which we can test
	
	1. Functional Testing :
			1. DML Operations w.r.t GUI Application
			2. Data Mapping
			3. Data Integrity & Keys
	2. Non-Functional Testing :
			1. Performance testing - Load, Stress
			2. Security testing

Schema testing on table : 
	
	Test Cases :
		* Check table presence in database schema - #show tables
		* Check table name conventions - #show tables
		* Check number of columns in a table - #SELECT count(*) as numberofcolumns from information_schema.columns where table_name='customer'
		* Check column names in a table - #select column_name from information_schema.columns where table_name='customers'
		* Check data type of columns in table - #select column_name, data_type from information_schema.columns where table_name='customers'
		* Check size of the columns in a table - #select column_name, column_type from information_schema.columns where table_name='customers'
		* Check nulls field in a table - #select column_name, is_nullable from information_schema.columns where table_name='customers'
`		* check column keys in a table - #select column_name, column key  from information_schema.columns where table_name='customers'

Stored Procedures testing : 

	What is store procedure?
		* A stored procedure is block of SQL statements.
		* We can save stored procedures and can be reuse multiple times.	
		* We can also pass parameters to a stored procedure.
		
	Advantages : 
		* Reduce network traffic
			stored procedures help reduce the network traffic between applications and mysql server. Because instead of sending multiple lengthy 
			SQL statements, applications have to send only the name and parameters of stored procedures.
		* Centralize business logic in the database
			We can use the stored procedures to implement business logic that is reusable by multiple applications. The stored procedures help
			reduce the effort of duplicating the same logic in many applications and make your database more consistent.
		* Make database more secure
			The database administrator can grant approximate privileges to applications that only access specific stored procedures without giving any
			privileges on the underlying tables.

Creating store procedure : 

	delimiter //
	create procedure procedurename()
	begin
		statments want to be executed 
	end //
	delimiter ;

Calling stored procedure :

	call procedurename();

Creating single paramter store procedure :

	delimeter //
	create procedure procedurename(in name datatype())
	begin
		statments want to be executed
	end //
	delimiter ;

Calling paramterized stored procedure : 

	call procedurename(value);

Creating store procedure with input and output :

	delimiter //
	create procedure procedurename(in i1name datatype, out o1name datatype, out o2name datatype)
	begin 
		select count(*) into o1name from tablename where columnname=i1name and columnname=value
		select count(*) into o1name from tablename where columnname=i1name and columnname=value
	end //
	delimiter ;

Calling input and output stored procedures :

	call procedurename(value, @o1name, @o2name)
	select @o1name,@o2name;

creating store procedure with cases :

	delimiter //
	create procedure procedurename(in i1name datatype, out o1name datatype)
	begin
		declare somename datatype;
		select columnname into somename from tablename where columnname=i1name;
		case somename
			when 'value' then
				set o1name='expected output';
			when 'value' then
				set 01name='expected output';
			else
				set o1name='expected output';
		end case
	end //
	delimiter ;

exception hanlding in stor procedures :

 	delimiter //
	create procedure procedurename(in insuplierif int, in inproductid int)
	begin
	----exit if duplicate key occurs
	declare exit handler for 1062 select 'duplicate keys error encountered' message;
	declare exit handler for sqlexception select 'sqlexception encountered' message;
	declare exit handler for sqlstate '23000' select 'sqlstate 23000' errorcode;

	---insert a new row into the supplierproduct
	insert into supplierproducts(supplierid,productid) values(insuplierid, inproductid);

	---return the product supplied by the supplier id
	select count(*) from supplierproducts where suplierid=insuplierid;
	end //
	deleimiter ;

Common test scenarios for stored procedures :

	1. Check stored procedure exist in database
	2. Check stored procedure with valid input data
	3. Check stored procedure handle exception when you pass invalid input data
	4. Check stored procedure display results as expected
	5. Check stored procedure inserting data into proper table/s
	6. Check stored procedure updating data into proper table/s
	7. Check stored procedure deleting data from proper table/s
	8. Check calling stored procedure from another stored procedure

Document for stored procedures

	1. Stored Procedure name
	2. Description
	3. input parameters
	4. output parameters  

To check stored procedures in database :
	
	#SHOW PROCEDURE STATUS WHERE DB='DATABASENAME';
			OR
	#SHOW PROCEDURE STATUS WHERE NAME='PROCEDURENAME';

Stored procedures automation testing :
JDBC connection :

	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?verifyServerCertificate=false&useSSL=true","root","root");
	
	Statement stmt=con.createStatement();
	
	ResultSet rs=stmt.execute("Query"); // execute command is used for DML commands
	
	ResultSet rs=stmt.executeQuery("Query"); // execute command is used for DQL commands
	
	System.out.print(rs.getInt(1)+", ");
	
	System.out.print( rs.getString(2)+", ");

	CallableStatement Cstmt=con.preparecall("call query"); // to call the stored procedures

	Cstmt.setString(1, "Singapore"); //to set input parameter

	Cstmt.registerOutParameter(2, types.INTEGER); //output parameters

	Cstmt.executeQuery();

	int variablename1=Cstmt.getInt(2);

	con.close // to close the connection with database 


Logic to compare to result sets :

	public boolean compareResultSets(ResultSet resultset1, ResultSet resultSet2) throws SQLException
	{
		while (resultset1.next())
			{
				resultset2.next();
				int count = resultset1.getMetaData().getColumnCount();
				for (int i = 1; i <- count; i++)
				{
					if(!StringUtils.equals(resultSet1.getString(i), resultSet2.getString(i)))  //to use Stringutils add dependency common apache lang3
					{
						return false;
					}
				}
			}
			return true;
	}

Syntax to follow while calling stored procedures in jdbc :

	{ call procedure_name() }       Accept no parameter and return no value
	{ call procedure_name(?,?) }       Accept two parameter and return no value
	{ ?= call procedure_name() }       Accept no parameter and return value
	{ ?=call procedure_name(?) }       Accept one parameter and return value


What is Stored function?

	A stored function is a special kind stored program that returns asingle value.

Stored procedure vs Stored function :

	* The stored function must return a value but in stored procedure it is optional.
	* Even a procedure can retunr zero or n values.
	* Functions can have only input parameters for it whereas procedures can have input or output parameters.
	* Functions can be called from procedure whereas procedures cannot be called from a function.

How to create stored function :

	delimiter //
	create function CustomerLevel(credit Decimal(10,2)) return varchar(20)
	deterministic
	begin
		declare customerlevel varchar(20)
		if credit > 50000 then set customerlevel = 'platinum';
		elseif (credit >= 10000 and credit <= 50000) then set customerlevel = 'gold';
		elseif credit < 10000 then set customerlevel = 'silver';
		end if;
		return customerlevel;
	end //
	delimiter ;

	Test Query :

		SELECT CUSTOMERNAME, 
		CASE
			WHEN CREDITLIMIT > 50000 THEN 'PLATINUM'
			WHEN CREDITLIMIT >= 10000 AND CREDITLIMIT <= 50000 THEN 'GOLD'
			WHEN CREDITLIMIT < 10000 THEN 'SILVER'
		END AS CUSTOMERLEVEL FROM CUSTOMERS;

To check stored functions in database :
	
	#SHOW FUCNTIONS STATUS WHERE DB='DATABASENAME';
			OR
	#SHOW FUCNTIONS STATUS WHERE NAME='FUCNTIONSNAME';

How to call stored function :

	select cutomernamecolumn,cutomerlevel(columnname) from customers;

calling store function from stored procedure :

	delimiter //
	create procedure gaecutomerlevel(in customerno int, out customerlevel varchar(20))
	begin	
		declare credit decimal(10,2) default 0;
		----get credit limit of a customer
		select creditlimit into credit from customers where customernumber = customerno;
		----call the function
		set customerlevel = customerlevel(credit);
	end //
	delimiter;

	Test Query :

		SELECT CUSTOMERNAME, 
		CASE
			WHEN CREDITLIMIT > 50000 THEN 'PLATINUM'
			WHEN CREDITLIMIT >= 10000 AND CREDITLIMIT <= 50000 THEN 'GOLD'
			WHEN CREDITLIMIT < 10000 THEN 'SILVER'
		END AS CUSTOMERLEVEL FROM CUSTOMERS WHERE CUSTOMERNUMBER='ENTERANYCUSTOMERNUMBER';

Common test scenarios for store function :

	1. Check stored function exist in database
	2. Check stored function with valid input data
	3. Check stored function handle exceptions when you pass invalid input data
	4. check stored function returns results as expected
	5. Check stored function not used insert/update/delete operations
	6. Check stored fucntion used only select statements
	7. Check calling stored function from store procedure

How to automated sql stored functions :

	same as stored procedure

Trigger testing :
 
What is trigger?

	* A trigger is a set of SQL statments that reside in a system catalog.
	* It is a special type of stored procedure that is involved automatically in response to an event.
	* Each trigger is associated with a table, which is activated on any DML statement such as INSERT, UPDATE, or DELETE. 
	* A trigger is called a special procedure beacause it cannot be called dircetly like a stored procedure.
	* The main difference between the trigger and procedure is that a trigger is called automatically when a data
	  modification event is made againt a table.
	* A stored procedure must be called explicitly.

Types of triggers in mysql : 

	* We can define the maximum six types of actions or events in the form of trigger
	* Before insert : it is actviated before the insertion of data into the table.
	* After insert : It is activated after the insertion of data into the table.
	* Before update : It is activated before the update of the data into the table.
	* After update : It is activated after the update of the data into the table.
	* Before Delete : It is activated before the data is removed from the table.
	* After Delete : It is activated after the deletion of data from the table.

Creating a trigger :

	Before insert :

		create table workcenters(id int auto_increment primary key, name varchar(100) not null, capacity int not null);
		create table workCenterstats( totalCapacity int not null );

		delimiter //
		create trigger before_workcenters_insert before insert on workcenters for each row
		begin
			declare rowcount int;
			select count(*) into rowcount from wokrcenterStats;
			if rowcount > 0 then update workcenterStats set totalCapacity = totalCapacity + new.capacity;
			else insert into wokrCenterStats(totalCapacity) values(new.capacity);
			end if;
		end //
		delimiter ;

	After insert : 

		create table members (id int auto_increment, name varchar(100) not null, email varchar(255), birthdate date, primary key(id));
		create table reminders(id int auto_increment, memberId int, message varchar(255) not null, primary key(id, memberId));

		delimiter //
		create trigger after_members_insert after insert on members for each row
		begin
			if new.birthdate is null then insert into reminders(membersID, message)
				Values(new.id,concat('Hi', new.name, ', please update your date of birth.'));
			end if
		end //
		delimiter ;

	Before update :

		create table sales (id int auto_increment, product varchar(100) not null, quantity int not null default 0,fiscalyear smallint not null, 
		fiscalmonth tinyiny not null, check(fiscalmonth >= 1 and fiscalmonth <=12), check(fiscalyear between 2000 and 2050),
		check(quantity >= 0), unique(product, fiscalyear, fiscalmonth), primary key(id));
	
		insert into sales(product, quantity, fiscalyear, fiscalmonth) values
		('2003 Harley-Davidson Eagle Drag Bike',120,2020,1),
		('1969 corvair monza',150,2020,1),
		('1970 plymouth Hemi cuda', 200,2020,1);

	delimiter //
	create trigger before_sales_update before update on sales for each row
	begin
		declare errorMessage varchar(255);
		set errorMessage = concat('The new quantity ', new.quantity, ' cannot be 3 times greater than the current quantity ', old.quantity);
		if new.quantity > old.quantity * 3 then
			signal sqlstate '45000' set message_text = errorMessage;
		end if;
	end //
	delimiter ; 

	After update :

		create table salesChanges(id int auto_increment primary key, salesid int, beforeQuantity int, afterQuantity int, changedAt timestamp not null default Current_timestamp);

	delimiter //
	create trigger after_sales_update after update on sales for each row
	begin
		if old.quantity <> new.quantity then
			insert into saleschanges(salesId, beforeQuantity, afterQuantity)
			values(old.id, old.quantity, new.quantity);
		end if;
	end//
	delimiter ;

	Before Delete :
	
		create table salaries(employeeNumber int primary key, ValidFrom date not null, Salary decimal(12,2) not null default 0);
		insert into salaries(employeeNumber, validFrom, salary)
		values (1002,'2000-01-01',50000),
		       (1056,'2000-01-01',60000),
		       (1076,;2000-01-01',70000);

		create table salaryArchives(id int primary key auto_increment, employeeNumber int, ValidFrom Date not null, salary dec(12,2) not null default 0,
						deletedAt timestamp default now());

		delimiter //
		create trigger before_salaries_delete before delete on salaries for each row
		begin
			insert into salaryArchives(employeeNumber, validFrom, salary)
			values(old.employeeNumber, old.validFrom, old.salary);
		end //
		delimiter ;

	After Delete :
		
		create table salaries (employeeNumber int primary key, validFrom date not null, salary Decimal(12,2) not null default 0);
		insert into salaries(employeeNumber, validFrom, salary)
		values
			(1002,'2000-01-01',50000),
			(1056,'2000-01-01',60000),
			(1076,'2000-01-01',70000);

		create table SalaryBudgets(total Decimal(15,2) not null);
		insert into salaryBudgets(total) select sum(salary) from salaries;

		create trigger after_salaries_delete after delete on Salaries for each row
		update SalaryBudgets set total = total - old.salary;

Data Mapping testing (CRUD) :

	* Testing database w.r.t frontend operations.
	* Focused on
		- Data Existence
		- Data Correctness
		- Data Completene

	* DataBase testcase should include 
		- Frontend Validation
		- Admin Validation
		- Database Validation
	
	* Prerequisite for database testcases
		- ER Model (Entity Relationship model) which can be find in document

ACID properties testing :

	A = Atomic : All changes tothe data must be performed successfully or not at all

		* If any transaction is performed, either it should be performed completely or should not be performed at all.
		* The transaction should not break in between or execute partially.
		* It is also referred to as "All or Nothing" rule.

		
		Atomicity :
			A          to           B

		Before $100		Before $100
		Debit  $10		Credit $10
		Available $90		Available $110

		Debited successfully-->Credited Succesfully

			Complete Execution
			Atomicity
			Execution successful


		
		No Atomicity :
			A          to           B

		Before $100		Before $100
		Debit  $10		Credit $10
		Available $90		Available $100

		Debited successfully-->Credited Failure

			Partial Execution
			No Atomicity
			Execution termination
	
	C = Consistent : Data must be in a consistent state beffore and after the transaction

		* If any change in the database is made, it should remain preserved always.
		* In the case of transaction, the database remains consistent before and after the transaction. The data should always be correct.

						A

					Before    $300
					Debit to B $50
					Available $250
					Debit to C $20
					Available $230

				B				C
			Before   $100			Before    $50
			Credit   $50			Credit    $20
			Available $150			Available $70

					Data Consistent

	I = Isolated : No other process can change the data while the transaction is running

		* When two or more transactions occur simultaneously, the consistency should remain maintained.
		* Any changes that occur in any particular transaction will not be seen by other transactions until the change is not committed in the memory.
		* If two operations are concurrently runnig on the two different accounts, then the value of both accounts should not get affected. The value
		  should remain persistent.
	
	D = Durable : The changes made by a transaction must persist

		* Ensure that the data is not lost in cases of a system failure or restart and is present in the samw state as it was before the system 
	          failure or restart.


Data Integrity Testing :

	Integrity Constraints : 

	will be used at the time of table creation
 	
	1. NOT NULL
	2. UNIQUE
	3. PRIMARY KEY
	4. FOREIGN KEY() REFERENCES parent table name(column name)
	5. ON DELETE CASCADE
	6. CHECK
	7. DEFAULT
















































	