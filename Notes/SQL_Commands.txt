SQL Overview:
	SQL stands for Structured Query Language. It is an American National Standard Institute (ANSI) standard. 
	It is a standard language for accessing and manipulating databases. Using SQL, some of the action we could do are to create
	databases, tables, stored procedures (SP’s), execute queries, retrieve, insert, update, delete data against a database.


	*SQL keywords are not case sensitive.

	*Example: CREATE is same as create.

SQL commands are segregated into following types:

	1. DDL – Data Definition Language
	2. DML – Data Manipulation Language
	3. DQL – Data Query Language
	4. DCL – Data Control Language
	5. TCL – Transaction Control Language

1. DDL(Data Definition Language):  
	*Allows to work with the Structure or Definition of the data
	*SQL commands come under DDL are as follows: CREATE, ALTER, DROP, TRUNCATE, COMMENT, RENAME

2. DML(Data Manipulation Language): 
	*To deal with the data itself directly
	*SQL Commands come under DML are as follows: INSERT, UPDATE, DELETE

3. DQL(Data Query Language): 
	*Deals with the data but to retrive the data
	*SQL Commands come under DQL are as follows: SELECT

4. DCL(Data Control Language): 
	*Controls the data
	*SQL Commands come under DCL are as follows: GRANT, REVOKE, DENY

5. TCL(Transaction Control Language): 
	*Deals with the transaction management
	*SQL Commands come under TCL are as follows: COMMIT, ROLEBACK, SAVE

Most important SQL Commands are as follows:
 	SELECT – It extracts data from a DataBase
	UPDATE – It updates data in a DataBase
	DELETE – It deletes data from a DataBase
	INSERT INTO – It inserts new data into a DataBase
	CREATE – It creates a new DataBase/Table/Index
	ALTER – It modifies a DataBase/Table
	DROP – It deletes a table/Index
	
SQL Data Types:
	*In SQL Server, each column in a database table has a name and a data type. We need to 
	decide what type of data to store inside each and every column of a table while creating a SQL table.

	*SQL Server supplies a set of system data types that define all types of data that can be used 
	with the SQL Server.

SQL Server offers following categories of data types:

	1.Exact Numeric
	2.Approximate Numeric
	3.Date and Time
	4.Character Strings
	5.Unicode Character Strings
	6.Binary

Exact Numeric SQL Data Types:
	
	bigint = Range from -2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)
	int = Range from -2^31 (-2,147,483,648) to 2^31-1 (2,147,483,647)
	smallint = Range from -2^15 (-32,768) to 2^15-1 (32,767)
	tinyint = Range from 0 to 255
	bit = 0 and 1
	decimal = Range from –10^38 +1 to 10^38 -1
	numeric = Range from -10^38 +1 to 10^38 -1
	money = Range from -922,337,203,685,477.5808 to +922,337,203,685,477.5807
	small money = Range from -214,748.3648 to +214,748.3647

Approximate Numeric SQL Data Types:
	
	float = Range from -1.79E + 308 to 1.79E + 308
	real = Range from -3.40E + 38 to 3.40E + 38

Date and Time SQL Data Types:

	datetime = From Jan 1, 1753 to Dec 31, 9999
	smalldatetime = From Jan 1, 1900 to Jun 6, 2079
	date = To store a date like March 27, 1986
	time = To store a time of day like 12:00 A.M.

Character Strings SQL Data Types:

	char = Maximum length of 8,000 characters
	varchar = Maximum of 8,000 characters
	varchar(max) = Maximum length of 231 characters
	text = Maximum length of 2,147,483,647 characters.

Unicode Character Strings SQL Data Types:

	nchar = Maximum length of 4,000 characters
	nvarchar = Maximum length of 4,000 characters
	nvarchar(max) = Maximum length of 231 characters
	ntext = Maximum length of 1,073,741,823 characters

Binary SQL Data Types:

	binary = Maximum length of 8,000 bytes
	varbinary  = Maximum length of 8,000 bytes
	varbinary(max) = Maximum length of 231 bytes
	image = Maximum length of 2,147,483,647 bytes


SQL Operators:

	SQL Operator is a reserved word used primarily in an SQL statement’s WHERE clause to perform operations, 
	such as arithmetic operations and comparisons. These are used to specify conditions in an SQL statement.

There are are three types of Operators.

	1.Arithmetic Operators
	2.Comparison Operators
	3.Logical Operators

1.SQL Arithmetic Operators:

	Let’s assume two variables “x” and “y”. Here “x” is valued 30 and “y” valued 60.

	In SQL, we use Arithmetic operators such as +, –, *, /, %.

2.SQL Comparison Operators:

	Let’s assume two variables “x” and “y”. Here “x” is valued 30 and “y” valued 60.

	In SQL, we use Comparison operators such as =, !=, >, <, >=, <=,<>, !<, !>. Check the below image for the 
	description of each operator.

3.SQL Logical Operators:

	In SQL, we use Logical operators such as AND, OR, NOT, IN, BETWEEN, ALL, EXISTS, LIKE. Check the below 
	image for the description of each operator.

SQL Create Database:
	
	*The SQL CREATE DATABASE statement is used to create new SQL database

	
	#CREATE DATABASE databasename;

	Note: Always database name should be unique within the RDBMS.

SQL Create Table:

	*The SQL CREATE TABLE statement is used to create a new table in a database.
	Creating a table involves naming the table and defining its columns and data type of each column.

	#CREATE TABLE table_name(column_name_1 data_type(size), column_name_2 data_type(size),.. , column_name_n data_type(size));
	
	*The column_name_1 parameters specify the names of the columns of the table.
	*The data_type parameter specifies the data type of the column (e.g. char, varchar, integer, decimal, float, etc.).

SQL Select Query:

	*SQL Select Query is used to select data from a Database.

	#SELECT column_name_1, column_name_2, .. column_name_n FROM table_name;
				
					or

	#SELECT * FROM table_name

	where * represents all the columns of the table.

SQL WHERE Clause:

	The SQL WHERE clause is used to specify a condition while fetching the data from a table. We use WHERE 
	clause to filter the records and fetching only necessary records.

	The WHERE clause is not only used in SELECT statement, but it is also used in UPDATE, DELETE statement, etc.,

	SQL WHERE Clause Syntax:

		#SELECT column_name_1, column_name_2, .. column_name_n FROM table_name WHERE [condition];
		
		You can specify a condition using comparison or logical operators like >, <, =, LIKE, NOT, etc.

		example : #SELECT * FROM SCOREBOARD WHERE RUNS>20;


SQL Select Distinct:

	SQL SELECT DISTINCT query is used to return only unique values. It eliminates all the duplicated values.

	#SELECT DISTINCT column_name,column_name FROM table_name;

	example : SELECT DISTINCT Fours FROM SCOREBOARD;


SQL UNION Clause:

	SQL UNION operator combines the result of two or more SELECT statements.

	The SQL UNION operator selects only distinct values by default.

	#SELECT * FROM Table_Name1 UNION SELECT * FROM Table_Name2;

	example : SELECT * FROM PLAYERS UNION SELECT * FROM SCOREBOARD

	UNION clause combines the first two queries and returns only the distinct values. 
	In the result you could see only the values which are not duplicated.

SQL UNION ALL Clause :

	SQL UNION operator combines the result of two or more SELECT statements. If we want to include the duplicate 
	values too then we could use UNION ALL operator.

	#SELECT * FROM Table_Name1 UNION ALL SELECT * FROM Table_Name2;

	examlpe : SELECT * FROM PLAYERS UNION ALL SELECT * FROM SCOREBOARD

	UNION ALL clause combines the first two queries and returns the values from both the tables which includes duplicate values too (if any).


SQL ORDER BY keyword:

	SQL ORDER BY keyword is used to sort the data in ascending or descending order, based on one or more columns.

	#SELECT column_name_1, column_name_2 FROM table_name ORDER BY column_name_1 ASC|DESC, column_name_2 ASC|DESC;

	examples : Order By – Ascending Order:

			SELECT * FROM SCOREBOARD ORDER BY Playername ASC;

		   Order By – Descending Order:

			SELECT * FROM SCOREBOARD ORDER BY Playername DESC;

SQL Group By:
	
	The SQL GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set 
	by one or more columns.

	#SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);

	example : SELECT EmpName, SUM(SALARY) AS SALARY FROM SAMPLETABLE GROUP BY EmpName;



SQL Having:
	
	While using aggregate functions, we couldn’t use WHERE clause. We need to use SQL HAVING clause while using aggregate functions. 
	The HAVING Clause places conditions on Groups created by the GROUP BY clause where as the WHERE Clause places conditions on the selected columns.
	
	#SELECT column_name(s)
	 FROM table_name
	 WHERE condition
	 GROUP BY column_name(s)
	 HAVING condition
	 ORDER BY column_name(s);

	The HAVING clause must follow the GROUP BY clause in a query. If we use ORDER BY clause in a query then the HAVING clause
	 must precede the ORDER BY clause.

SQL LIKE Operator:

	The SQL LIKE operator is used in a WHERE clause to compare a value to similar values using wildcard operators.

	There are two wildcard operators used in conjunction with the Like operator.

		Percentage sign ( % )

		Underscore sign ( _ )

	#SELECT column_name(s) FROM table_name WHERE column_name LIKE somevalue;

	example : SELECT * FROM SCOREBOARD WHERE Playername LIKE 'Sachin';

	#SELECT * FROM SCOREBOARD WHERE Playername LIKE 'D%';

	#SELECT * FROM SCOREBOARD WHERE Playername LIKE '_achin';

SQL IN Operator:

	The SQL IN operator allows you to test if an expression matches any value in a list of values. It is specified with in a WHERE clause.

	#SELECT column_name(s) FROM table_name WHERE column_name IN (value_1,value_2,...value_n);

SQL BETWEEN Operator:

	SQL BETWEEN operator selects values within a range. The values can be numbers, text, or dates.

	#SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value_1 AND value_2;

SQL AND OR Operators:

	In this post, we will see both SQL AND OR Operators in detail.

	SQL AND Operator: It fetches the records only if both the first and the second condition are true.

	#SELECT * FROM table_name WHERE column_name_1=somevalue AND column_name_2=somevalue;

	SQL OR Operator: It fetches the records if any one of the condition is true.

	#SELECT * FROM table_name WHERE column_name_1=somevalue OR column_name_2=somevalue

SQL Insert Query:

	The SQL INSERT INTO statement is used to insert new records in a table.

	#INSERT INTO table_name (column_name_1,column_name_2,column_name_3,... column_name_n) VALUES (value_1,value_2,value_3,...value_n);

	Here, column_name_1, column_name_2,…column_name_N are the names of the columns in the table into which you want to insert data.

	example : INSERT INTO SCOREBOARD(Playername, Runs, Balls, Sixers, Fours) VALUES ('Sachin', 100, 100, 6, 10);
		  INSERT INTO SCOREBOARD(Playername, Runs, Balls, Sixers, Fours) VALUES ('Sehwag', 90, 70, 8, 4);
		  INSERT INTO SCOREBOARD(Playername, Runs, Balls, Sixers, Fours) VALUES ('Dravid', 20, 30, 0, 4);

SQL Update Query:

	The SQL UPDATE statement is used to update records in a table.

	#UPDATE table_name SET column_1=value_1,column_2=value_2,...column_n=value_n WHERE some_column=some_value;

	Here the WHERE clause specifies which record should be updated. If we didn’t mention WHERE clause then all the records will be updated.

	example : Following statement would update the value in the column name ‘Balls‘ of ‘SCOREBOARD’ table to ‘25‘ where the ‘Playername’ is equal to ‘Dravid‘.

		UPDATE SCOREBOARD SET Balls=25 WHERE Playername='Dravid';

		UPDATE SCOREBOARD SET Balls=25 WHERE Playername='Dravid';


SQL Delete Query:

	The SQL Delete statement is used to delete records from a table.

	#DELETE FROM table_name WHERE some_column=some_value;

	Here the WHERE clause specifies which record should be deleted. If we didn’t mention WHERE clause then all the records will be deleted.

	example : DELETE FROM SCOREBOARD WHERE Playername='Dravid' AND Runs=20;


	Delete all the records:

		We could delete all the records at a time from a particular table using the below syntax. All rows in a table will be deleted but not table.

		DELETE * FROM table_name;

SQL ALTER Query:

	SQL ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

	T0 Add A Column In A Table – Syntax:

		ALTER TABLE table_name ADD column_name datatype;

	To Delete A Column In A Table – Syntax:

		Note: Some database systems don’t allow deleting a column.

		ALTER TABLE table_name DROP COLUMN column_name;
	
	To Change The Data Type Of A Column In A Table – Syntax:

		ALTER TABLE table_name ALTER COLUMN column_name datatype;

SQL Drop Table:

	The SQL DROP TABLE statement is used to delete a table definition and all data, indexes, triggers, constraints, 
	and permission specifications for that table.

	NOTE: Once a table is deleted then all the information in the table would be lost forever. Please be careful while using this statement.

	DROP TABLE table_name;
	
	Before executing the DROP table, we first check whether the required table is available in the Database or not.

SQL Drop Database:
	
	Let’s see how to delete a database completely.

	The DROP DATABASE statement is used to delete a database

	Syntax:

		DROP DATABASE database_name;

Let’s see how to truncate data from a table:

	if we only want to delete the data inside the table, and not the table itself?

	Then, use the TRUNCATE TABLE statement:

	TRUNCATE TABLE table_name;

SQL Joins:

	SQL joins are used to combine rows from two or more tables. Here we are going to discuss the following Joins using these you 
	could return the data from two relational tables.

	Types of SQL Joins:
		i. INNER JOIN
		ii. LEFT JOIN
		iii. RIGHT JOIN
		iv. OUTER JOIN

1.INNER JOIN:

	This query will return all of the records in the left table (table A) that have a matching record in the right table (table B).

	#SELECT column_name(s) FROM Table1 INNER JOIN Table2 ON Table1.Column_Name = Table2.Column_Name

2.LEFT JOIN:

	This query will return all of the records in the left table (table A) regardless if any of those records have a match 
	in the right table (table B). It will also return any matching records from the right table.

	#SELECT column_name(s) FROM Table1 LEFT JOIN Table2 ON Table1.Column_Name = Table2.Column_Name

3.RIGHT JOIN:

	This query will return all of the records in the right table (table B) regardless if any of those records have a match 
	in the left table (table A). It will also return any matching records from the left table.

	#SELECT column_name(s) FROM Table1 RIGHT JOIN Table2 ON Table1.Column_Name = Table2.Column_Name

4.FULL OUTER JOIN:
	
	The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders).
	 If there are rows in “Customers” that do not have matches in “Orders”, or if there are rows in “Orders” that do not have matches
	 in “Customers”, those rows will be listed as well.

	This Join can also be referred to as a FULL OUTER JOIN or a FULL JOIN. This query will return all of the records from both tables, 
	joining records from the left table (table A) that match records from the right table (table B).

	#SELECT column_name(s) FROM Table1 FULL OUTER JOIN Table2 ON Table1.Column_Name = Table2.Column_Name

	Note on the OUTER JOIN that the inner joined records are returned first, followed by the right joined records, and then finally 
	the left joined records (at least, that’s how my Microsoft SQL Server did it; this, of course, is without using any ORDER BY statement).


SQL Aggregate Functions:

	In this post, we see SQL Aggregate functions in detail.

	SQL aggregate functions return a single value, calculated from values in a column.

		AVG() – This functions returns the average value
		COUNT() – This functions returns the number of rows
		MAX() – This functions returns the largest value
		MIN() – This functions returns the smallest value
		ROUND() – This functions rounds a numeric field to the number of decimals specified
		SUM() – This functions returns the sum


	SQL AVG() Syntax:

		#SELECT AVG(column_name) FROM table_name
	
	SQL COUNT() Function:
	
		#SELECT COUNT(column_name) FROM table_name;

	SQL MAX() Function:

		SELECT MAX(column_name) FROM table_name;

	SQL MIN() Function:

		SELECT MIN(column_name) FROM table_name;

	SQL ROUND() Function:

		SELECT ROUND(column_name,decimals) FROM table_name;

		Example: If the value is 250.55 and you want to show just 250 then you could pass decimals parameter as 0. 
		Same way if you want to show 250.5 then you could pass decimals value as 1.

	SQL SUM() Function:

		SELECT SUM(column_name) FROM table_name;
	
SQL String Functions:

	LEN() – It returns the length of the value in a text field

		SELECT LEN(column_name) FROM table_name;

	LOWER() – It converts character data to lower case

		SELECT LOWER(column_name) FROM table_name;

	UPPER() – It converts character data to upper case

		SELECT UPPER(column_name) FROM table_name;

	SUBSTRING() – It extracts characters from a text field

		SELECT SUBSTRING(column_name,start,length) AS some_name FROM table_name;

	LTRIM() – It is to remove all white space from the beginning of the string

		SELECT LTRIM(Playername) FROM SCOREBOARD;

	RTRIM() – It is to remove all white space at the end of the string

		SELECT RTRIM(Playername) FROM SCOREBOARD;

	CONCAT() – Concatenate function combines multiple character strings together.

		SELECT CONCAT(City,Country) from CUSTOMERS;

	REPLACE() –  To update the content of a string.

		SELECT REPLACE (City, 'C', 'ZZZZ') FROM CUSTOMERS;

SQL Numeric Functions:

	ABS() - It returns the positive number of any number

		SELECT ABS(Coloum_name) FROM tablename;

	SQRT() - It returns the square root of a number

		SELECT SQRT(Coloum_name) FROM tablename;

	MOD() - It returns the reminder number from divison

		SELECT MOD(Coloum_name) FROM tablename;

	POWER() - It returns the power of number

		SELECT POWER(Coloum_name) FROM tablename;

SQL Date Functions : 

	CURTIME() - It returns current time

		SELECT CURTIME();

	CURDATE() - It returns currenct date

		SELECT CURDATE(); 

	NOW() - it returns current date and time

		SELECT NOW();

	SYSDATE() - It returns current date and time

		SELECT SYSDATE();

	YEAR() - It returns year from the calender

		SELECT YEAR(any above function fucntion)

	MONTH() - It returns month from the calender

		SELECT MONTH(any above function fucntion)

	DATE() - It returns date from the calender

		SELECT DATE(any above function fucntion)


Integrity Constraints : 

	will be used at the time of table creation
 	
	1. NOT NULL
	2. UNIQUE
	3. PRIMARY KEY
	4. FOREIGN KEY() REFERENCES parent table name(column name)
	5. ON DELETE CASCADE
	6. CHECK
	7. DEFAULT

NTH Highest salary without using max, limit, top keywords

	#SELECT SALARAY FROM EMPLOYEE E1 WHERE N-1=(SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEE E2 WHERE E2.SALARY>E1.SALARY);

Create a table from existing table (only structure without data) :

	METHOD1 : #CREATE TABLE NEWTABLENAME AS SELECT * FROM TABLENAME WHERE 1=0
	METHOD2 : #SELECT * INTO NEWTABLENAME FROM TABLENAME WHERE 1=0

intersect : to get the common data from two or more tables

Minus: same like right and left join